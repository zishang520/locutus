// warning: This file is auto generated by `yarn build:tests`
// Do not edit by hand!

'use strict'

process.env.TZ = 'UTC'
var expect = require('chai').expect
var frexp = require('../../../../src/c/math/frexp.js') // eslint-disable-line no-unused-vars,camelcase

describe('src/c/math/frexp.js (tested in test/generated/c/math/test-frexp.js)', function () {
  it('should pass example 1', function (done) {
    var expected = [0.5, 1]
    var result = frexp(1)
    expect(result).to.deep.equal(expected)
    done()
  })
  it('should pass example 2', function (done) {
    var expected = [0.75, 1]
    var result = frexp(1.5)
    expect(result).to.deep.equal(expected)
    done()
  })
  it('should pass example 3', function (done) {
    var expected = [0.75, 502]
    var result = frexp(3 * Math.pow(2, 500))
    expect(result).to.deep.equal(expected)
    done()
  })
  it('should pass example 4', function (done) {
    var expected = [-0.5, 3]
    var result = frexp(-4)
    expect(result).to.deep.equal(expected)
    done()
  })
  it('should pass example 5', function (done) {
    var expected = [0.9999999999999999, 1024]
    var result = frexp(Number.MAX_VALUE)
    expect(result).to.deep.equal(expected)
    done()
  })
  it('should pass example 6', function (done) {
    var expected = [0.5, -1073]
    var result = frexp(Number.MIN_VALUE)
    expect(result).to.deep.equal(expected)
    done()
  })
  it('should pass example 7', function (done) {
    var expected = [-Infinity, 0]
    var result = frexp(-Infinity)
    expect(result).to.deep.equal(expected)
    done()
  })
  it('should pass example 8', function (done) {
    var expected = [-0, 0]
    var result = frexp(-0)
    expect(result).to.deep.equal(expected)
    done()
  })
  it('should pass example 9', function (done) {
    var expected = [NaN, 0]
    var result = frexp(NaN)
    expect(result).to.deep.equal(expected)
    done()
  })
})
